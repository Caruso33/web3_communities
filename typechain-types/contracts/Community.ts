/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Community {
  export type CommentStruct = {
    author: PromiseOrValue<string>;
    id: PromiseOrValue<BigNumberish>;
    postId: PromiseOrValue<BigNumberish>;
    hash: PromiseOrValue<string>;
    createdAt: PromiseOrValue<BigNumberish>;
    lastUpdatedAt: PromiseOrValue<BigNumberish>;
  };

  export type CommentStructOutput = [
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    author: string;
    id: BigNumber;
    postId: BigNumber;
    hash: string;
    createdAt: BigNumber;
    lastUpdatedAt: BigNumber;
  };

  export type PostStruct = {
    author: PromiseOrValue<string>;
    id: PromiseOrValue<BigNumberish>;
    title: PromiseOrValue<string>;
    hash: PromiseOrValue<string>;
    categoryIndex: PromiseOrValue<BigNumberish>;
    published: PromiseOrValue<boolean>;
    createdAt: PromiseOrValue<BigNumberish>;
    lastUpdatedAt: PromiseOrValue<BigNumberish>;
  };

  export type PostStructOutput = [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    author: string;
    id: BigNumber;
    title: string;
    hash: string;
    categoryIndex: BigNumber;
    published: boolean;
    createdAt: BigNumber;
    lastUpdatedAt: BigNumber;
  };
}

export interface CommunityInterface extends utils.Interface {
  functions: {
    "createCategory(string)": FunctionFragment;
    "createComment(uint256,string)": FunctionFragment;
    "createPost(string,string,uint256)": FunctionFragment;
    "deleteComment(uint256,uint256)": FunctionFragment;
    "fetchCategories()": FunctionFragment;
    "fetchCommentsOfPost(uint256)": FunctionFragment;
    "fetchPostByHash(string)": FunctionFragment;
    "fetchPostById(uint256)": FunctionFragment;
    "fetchPosts()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateComment(uint256,uint256,string)": FunctionFragment;
    "updateName(string)": FunctionFragment;
    "updatePost(uint256,string,string,uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createCategory"
      | "createComment"
      | "createPost"
      | "deleteComment"
      | "fetchCategories"
      | "fetchCommentsOfPost"
      | "fetchPostByHash"
      | "fetchPostById"
      | "fetchPosts"
      | "name"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateComment"
      | "updateName"
      | "updatePost"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createCategory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createComment",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createPost",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteComment",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchCategories",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchCommentsOfPost",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchPostByHash",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchPostById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchPosts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateComment",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePost",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "createCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createComment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteComment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchCommentsOfPost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchPostByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchPostById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fetchPosts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateComment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updatePost", data: BytesLike): Result;

  events: {
    "CommentCreated(uint256,address,uint256,string,uint256)": EventFragment;
    "CommentDeleted(uint256,address,uint256,uint256)": EventFragment;
    "CommentUpdated(uint256,address,uint256,string,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PostCreated(address,uint256,string,string,uint256,uint256)": EventFragment;
    "PostUpdated(address,uint256,string,string,uint256,bool,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CommentCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommentDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommentUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostUpdated"): EventFragment;
}

export interface CommentCreatedEventObject {
  postId: BigNumber;
  author: string;
  commentId: BigNumber;
  hash: string;
  createdAt: BigNumber;
}
export type CommentCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber],
  CommentCreatedEventObject
>;

export type CommentCreatedEventFilter = TypedEventFilter<CommentCreatedEvent>;

export interface CommentDeletedEventObject {
  postId: BigNumber;
  author: string;
  commentId: BigNumber;
  deletedAt: BigNumber;
}
export type CommentDeletedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  CommentDeletedEventObject
>;

export type CommentDeletedEventFilter = TypedEventFilter<CommentDeletedEvent>;

export interface CommentUpdatedEventObject {
  postId: BigNumber;
  author: string;
  commentId: BigNumber;
  hash: string;
  createdAt: BigNumber;
  lastUpdatedAt: BigNumber;
}
export type CommentUpdatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber, BigNumber],
  CommentUpdatedEventObject
>;

export type CommentUpdatedEventFilter = TypedEventFilter<CommentUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PostCreatedEventObject {
  author: string;
  id: BigNumber;
  title: string;
  hash: string;
  categoryIndex: BigNumber;
  createdAt: BigNumber;
}
export type PostCreatedEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, BigNumber],
  PostCreatedEventObject
>;

export type PostCreatedEventFilter = TypedEventFilter<PostCreatedEvent>;

export interface PostUpdatedEventObject {
  author: string;
  id: BigNumber;
  title: string;
  hash: string;
  categoryIndex: BigNumber;
  published: boolean;
  createdAt: BigNumber;
  lastUpdatedAt: BigNumber;
}
export type PostUpdatedEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, boolean, BigNumber, BigNumber],
  PostUpdatedEventObject
>;

export type PostUpdatedEventFilter = TypedEventFilter<PostUpdatedEvent>;

export interface Community extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CommunityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createCategory(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createComment(
      postId: PromiseOrValue<BigNumberish>,
      hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPost(
      title: PromiseOrValue<string>,
      hash: PromiseOrValue<string>,
      categoryIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteComment(
      postId: PromiseOrValue<BigNumberish>,
      commentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fetchCategories(overrides?: CallOverrides): Promise<[string[]]>;

    fetchCommentsOfPost(
      postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Community.CommentStructOutput[]]>;

    fetchPostByHash(
      hash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Community.PostStructOutput]>;

    fetchPostById(
      postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Community.PostStructOutput]>;

    fetchPosts(
      overrides?: CallOverrides
    ): Promise<[Community.PostStructOutput[]]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateComment(
      postId: PromiseOrValue<BigNumberish>,
      commentId: PromiseOrValue<BigNumberish>,
      hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateName(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePost(
      postId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      hash: PromiseOrValue<string>,
      categoryIndex: PromiseOrValue<BigNumberish>,
      published: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createCategory(
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createComment(
    postId: PromiseOrValue<BigNumberish>,
    hash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPost(
    title: PromiseOrValue<string>,
    hash: PromiseOrValue<string>,
    categoryIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteComment(
    postId: PromiseOrValue<BigNumberish>,
    commentId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fetchCategories(overrides?: CallOverrides): Promise<string[]>;

  fetchCommentsOfPost(
    postId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Community.CommentStructOutput[]>;

  fetchPostByHash(
    hash: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Community.PostStructOutput>;

  fetchPostById(
    postId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Community.PostStructOutput>;

  fetchPosts(overrides?: CallOverrides): Promise<Community.PostStructOutput[]>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateComment(
    postId: PromiseOrValue<BigNumberish>,
    commentId: PromiseOrValue<BigNumberish>,
    hash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateName(
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePost(
    postId: PromiseOrValue<BigNumberish>,
    title: PromiseOrValue<string>,
    hash: PromiseOrValue<string>,
    categoryIndex: PromiseOrValue<BigNumberish>,
    published: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createCategory(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createComment(
      postId: PromiseOrValue<BigNumberish>,
      hash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createPost(
      title: PromiseOrValue<string>,
      hash: PromiseOrValue<string>,
      categoryIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteComment(
      postId: PromiseOrValue<BigNumberish>,
      commentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchCategories(overrides?: CallOverrides): Promise<string[]>;

    fetchCommentsOfPost(
      postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Community.CommentStructOutput[]>;

    fetchPostByHash(
      hash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Community.PostStructOutput>;

    fetchPostById(
      postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Community.PostStructOutput>;

    fetchPosts(
      overrides?: CallOverrides
    ): Promise<Community.PostStructOutput[]>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateComment(
      postId: PromiseOrValue<BigNumberish>,
      commentId: PromiseOrValue<BigNumberish>,
      hash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateName(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePost(
      postId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      hash: PromiseOrValue<string>,
      categoryIndex: PromiseOrValue<BigNumberish>,
      published: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CommentCreated(uint256,address,uint256,string,uint256)"(
      postId?: PromiseOrValue<BigNumberish> | null,
      author?: PromiseOrValue<string> | null,
      commentId?: null,
      hash?: null,
      createdAt?: null
    ): CommentCreatedEventFilter;
    CommentCreated(
      postId?: PromiseOrValue<BigNumberish> | null,
      author?: PromiseOrValue<string> | null,
      commentId?: null,
      hash?: null,
      createdAt?: null
    ): CommentCreatedEventFilter;

    "CommentDeleted(uint256,address,uint256,uint256)"(
      postId?: PromiseOrValue<BigNumberish> | null,
      author?: PromiseOrValue<string> | null,
      commentId?: null,
      deletedAt?: null
    ): CommentDeletedEventFilter;
    CommentDeleted(
      postId?: PromiseOrValue<BigNumberish> | null,
      author?: PromiseOrValue<string> | null,
      commentId?: null,
      deletedAt?: null
    ): CommentDeletedEventFilter;

    "CommentUpdated(uint256,address,uint256,string,uint256,uint256)"(
      postId?: PromiseOrValue<BigNumberish> | null,
      author?: PromiseOrValue<string> | null,
      commentId?: null,
      hash?: null,
      createdAt?: null,
      lastUpdatedAt?: null
    ): CommentUpdatedEventFilter;
    CommentUpdated(
      postId?: PromiseOrValue<BigNumberish> | null,
      author?: PromiseOrValue<string> | null,
      commentId?: null,
      hash?: null,
      createdAt?: null,
      lastUpdatedAt?: null
    ): CommentUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PostCreated(address,uint256,string,string,uint256,uint256)"(
      author?: PromiseOrValue<string> | null,
      id?: null,
      title?: null,
      hash?: null,
      categoryIndex?: null,
      createdAt?: null
    ): PostCreatedEventFilter;
    PostCreated(
      author?: PromiseOrValue<string> | null,
      id?: null,
      title?: null,
      hash?: null,
      categoryIndex?: null,
      createdAt?: null
    ): PostCreatedEventFilter;

    "PostUpdated(address,uint256,string,string,uint256,bool,uint256,uint256)"(
      author?: PromiseOrValue<string> | null,
      id?: null,
      title?: null,
      hash?: null,
      categoryIndex?: null,
      published?: null,
      createdAt?: null,
      lastUpdatedAt?: null
    ): PostUpdatedEventFilter;
    PostUpdated(
      author?: PromiseOrValue<string> | null,
      id?: null,
      title?: null,
      hash?: null,
      categoryIndex?: null,
      published?: null,
      createdAt?: null,
      lastUpdatedAt?: null
    ): PostUpdatedEventFilter;
  };

  estimateGas: {
    createCategory(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createComment(
      postId: PromiseOrValue<BigNumberish>,
      hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPost(
      title: PromiseOrValue<string>,
      hash: PromiseOrValue<string>,
      categoryIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteComment(
      postId: PromiseOrValue<BigNumberish>,
      commentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fetchCategories(overrides?: CallOverrides): Promise<BigNumber>;

    fetchCommentsOfPost(
      postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchPostByHash(
      hash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchPostById(
      postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchPosts(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateComment(
      postId: PromiseOrValue<BigNumberish>,
      commentId: PromiseOrValue<BigNumberish>,
      hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateName(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePost(
      postId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      hash: PromiseOrValue<string>,
      categoryIndex: PromiseOrValue<BigNumberish>,
      published: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createCategory(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createComment(
      postId: PromiseOrValue<BigNumberish>,
      hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPost(
      title: PromiseOrValue<string>,
      hash: PromiseOrValue<string>,
      categoryIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteComment(
      postId: PromiseOrValue<BigNumberish>,
      commentId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fetchCategories(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchCommentsOfPost(
      postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchPostByHash(
      hash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchPostById(
      postId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchPosts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateComment(
      postId: PromiseOrValue<BigNumberish>,
      commentId: PromiseOrValue<BigNumberish>,
      hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateName(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePost(
      postId: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      hash: PromiseOrValue<string>,
      categoryIndex: PromiseOrValue<BigNumberish>,
      published: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
